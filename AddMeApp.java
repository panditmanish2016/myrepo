/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DemoTest.java
 *
 * Created on 8 Aug, 2017, 10:39:20 AM
 */
package desktopappsfordesktop;
import com.xuggle.xuggler.IContainer;
import java.awt.Desktop;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.bind.DatatypeConverter;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import sun.misc.BASE64Encoder;

/**
 *
 * @author Lenovo
 */
public class AddMeApp extends javax.swing.JFrame {
 private static final int BUFFER_SIZE = 4096;

    /** Creates new form DemoTest */
 
   boolean flag=true;
        boolean flag1=true;
 
    public AddMeApp() throws IOException {
        //initComponents();
        System.out.println("Inside constructor");
        jButton1ActionPerformed();
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                try {
                    jButton1ActionPerformed();
                } catch (IOException ex) {
                    Logger.getLogger(AddMeApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }, 
        30000 
);
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Device Registration");

        jLabel2.setText("Mac Id");

        jLabel3.setText("Device Name");

        jLabel4.setText("Location");

        jButton1.setText("Register Device");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed();
                } catch (IOException ex) {
                    Logger.getLogger(AddMeApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        jButton2.setText("Devices List");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))))
                .addGap(124, 124, 124))
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed() throws IOException {//GEN-FIRST:event_jButton1ActionPerformed

    String macaddress[] = getmacaddress();
   // jTextField1.setText(macaddress.toString());
    String macid =  macaddress[1];//jTextField1.getText();
    System.out.println("Macid:"+macid);
//String[] devicename = macid.split("/");
//macid = devicename[0];
//String name = devicename[1];
String name = macaddress[0];//jTextField2.getText();
//String location = "12.9716°N,77.5946°E";//jTextField3.getText();
//String location = "12.9716,77.5946";//jTextField3.getText();
String location = "31.1048,77.1734";//jTextField3.getText();
String status ="Created";
//System.out.println("Macid:"+devicename[0]+"\n devicename:"+devicename[1]+"\n location:"+location);
//macid =  jTextField1.getText();
System.out.println("Macid:"+macid+"\n devicename:"+name+"\n location:"+location);
/*String uniquename="42818.mp4";
//getUrl(uniquename,macid);
//String url ="";*/
String url = geturls(macid,name,location,status);
System.out.println("url:"+url);
String[] urls = url.split(","); 
for(int i=0;i<urls.length;i++)
System.out.println("URLS:"+urls[i]);
Sucess s = new Sucess();
s.setVisible(true);
dispose();
 for(int i=0;i<urls.length;i++){
     String fileURL = urls[i];
     fileURL = fileURL.replace("[", "");
        fileURL = fileURL.replace("]", "");
        fileURL.replace("\"", "");
        System.out.println("File URLS:"+fileURL);
     if(null != fileURL && !fileURL.equalsIgnoreCase(""))  {
        
        // String fileURL = "http://www.avajava.com/images/avajavalogo.jpg";
       // String fileURL = "http://techslides.com/demos/sample-videos/small.flv";
        
        int index = ordinalIndexOf(fileURL, "/", 6);
        System.out.println("index:"+index);
        
        if(index==-1)
        {
          System.out.println("system message ");
        }             
        else{
         System.out.println(fileURL.substring(index+1,fileURL.lastIndexOf("/"))); 
               String fileName = fileURL.substring(index+1,fileURL.lastIndexOf("/"));
               
                System.out.println("filename:::::"+fileName);
        String saveDir = "C:/AddMe";
        File files = new File(saveDir);
        if (!files.exists()) {
         files.mkdirs();
                }
               String completepath = saveDir+"/"+fileName;
               System.out.println("filename:"+completepath);
        //try {
            //downloadliferay(fileURL,saveDir);
               try{
           //downloadUsingStream(fileName, completepath);
           int length=0;
           String sst = downloadFile(fileURL, completepath,index+3,macid,fileName);
          /* System.out.println("File length:"+length);
                          IContainer container = IContainer.make();
int result = container.open(fileName, IContainer.Type.READ, null);
long duration = container.getDuration();
 System.out.println("duration:"+duration);
long fileSize = container.getFileSize();
 System.out.println("fileSize:"+fileSize); */
               }catch(Exception e)
               {}

           // int length=downloadFile(fileURL, saveDir,index+3);
           // System.out.println("File length:"+length);
              //ProcessBuilder pb = new ProcessBuilder("C://Program Files//VideoLAN//VLC//vlc.exe", completepath);
     //Process start = pb.start();
     //start.destroy();
    //   Runtime.getRuntime().exec(new String[] { "C://Program Files//VideoLAN//VLC//vlc.exe", completepath });
        
                if(flag1)
                  {
                       System.out.println("Flag1 is calling to play file downloaded");
               if (Desktop.isDesktopSupported()) 
      Desktop.getDesktop().open(new File(completepath));
                  }
                  // TimeUnit.MICROSECONDS.sleep(length);
      // System.out.println("Sleep time:"+length/60000);
                /*try {
                   // TimeUnit.SECONDS.sleep(10);
                   // Desktop.getDesktop().open(null);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AddMeApp.class.getName()).log(Level.SEVERE, null, ex);
                }*/
        }
       
       
 }
    }
//}
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 try
 {
    checkHosts("192.168.0");// TODO add your handling code here:
 }
 catch(Exception e)
 {
     e.printStackTrace();
 }
}//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMeApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMeApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMeApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMeApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
System.out.println("Inside main method");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AddMeApp().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(AddMeApp.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
        });
    }
    
   Timer timer = new Timer ();
TimerTask hourlyTask = new TimerTask () {
    @Override
    public void run () {

    }
};


public String[] getmacaddress()
{
    String address = "";
    String detail[] = new String[2]; 
    InetAddress macaddress= null;
    try {

		macaddress = InetAddress.getLocalHost();
		//System.out.println("Current IP address : " + macaddress.getHostAddress());
                detail[0] = macaddress.getHostName();
                System.out.println("host add--"+macaddress.getHostAddress());
		NetworkInterface network = NetworkInterface.getByInetAddress(macaddress);

		byte[] mac = network.getHardwareAddress();

		//System.out.print("Current MAC address : ");

		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < mac.length; i++) {
			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
		}
		//System.out.println(sb.toString());
                //sb.append("/"+macaddress.toString());
                address = sb.toString();

	} catch (UnknownHostException e) {

		e.printStackTrace();

	} catch (SocketException e){

		e.printStackTrace();

	}
    detail[1] = address;
    System.out.println("mAC ID BEFORE RETURN "+address);
        return detail;

}
    
      public String downloadFile(String fileURL, String saveDir,int indexs,String macid,String Filename)
            throws IOException {
        int contentLength=0;
        // fileURL = fileURL.replace("\"", "");
        //fileURL = 'h'+fileURL;
       // fileURL = "\""+fileURL;
        StringBuilder sb = new StringBuilder(fileURL);
       sb.deleteCharAt(0);
        sb.deleteCharAt(sb.length()-1);
        fileURL = sb.toString();
      //          fileURL = fileURL.substring(0, fileURL.length() - 1);
        fileURL = fileURL.replace("localhost", "192.168.0.106");
        // fileURL = fileURL.replace("localhost", "216.98.9.235");
             //  fileURL = fileURL.replace("localhost:8080", "www.google.com");
       // fileURL = fileURL.substring(1,fileURL.length());
      //  fileURL ="http://panditmanish680@gmail.com:111/192.168.0.148:8080/webdav/guest/document_library/File_Upload/32202.mp4";
       // fileURL ="http://dev.exiv2.org/attachments/342/A_monkey_tale_.3gp/9e4d295d-ea5e-4728-89a7-c16ec5f3c2dd";
      //  fileURL = "http://192.168.0.148:8080/documents/20181/24301/27901.mp4/fa27f1ac-f235-4f2b-896f-74c4a2b80dad";
        System.out.println("fileURL:"+fileURL);
        // to resume download 
          URL url=new URL(fileURL);
         HttpURLConnection   httpConn = (HttpURLConnection)url.openConnection();
         contentLength=httpConn.getContentLength();
        File file=new 	File("C:\\AddMe");
                        long downloadedSize=0;
                        long contentLengthLong=0;
                        BufferedInputStream input;
                        RandomAccessFile output;
                        System.out.println("fileS = " + file);
                        //httpConn.disconnect();
     
			   for ( File f : file.listFiles()) 
			   {
                              if(f.exists()&& !f.isDirectory())
                               { 
                              System.out.println("filesName = " + f.getName()); 
                              if(f.getName().equalsIgnoreCase(Filename))
					 {
                                             flag1=true;
                                              flag=false;
                                              System.out.println("length from disk "+f.length()+" length from http "+contentLength );
						 if(f.length()!=contentLength)
						 {
							  System.out.println("file length of unsuccessfull");
                                                          flag=false;
                                                            flag1=true;
                                                          // to resume downlaod 
                                                     
                                                         httpConn.setAllowUserInteraction(true);
                                                          httpConn.setRequestProperty("Range", "bytes=" + f.length() + "-");
                                                           String connectionField = httpConn.getHeaderField("content-range");
                                                           System.out.println("connectionField "+connectionField);

                                                           if (connectionField != null)
                                                             {
                                                          String[] connectionRanges = connectionField.substring("bytes=".length()).split("-");
                                                          downloadedSize = Long.valueOf(connectionRanges[0]);
                                                          System.out.println("downloadedSize "+downloadedSize);
                                                             } 
                                                           
                                                           contentLengthLong = httpConn.getContentLength() + downloadedSize;
                                                            System.out.println("File downloade contentLengthLong "+contentLengthLong);
                                                           input = new BufferedInputStream(httpConn.getInputStream());
                                                           output = new RandomAccessFile(f, "rw");
                                                           output.seek(downloadedSize);
                                                           byte data[] = new byte[BUFFER_SIZE];
                                                           int count = 0;
                                                           int __progress = 0;
                                                           while ((count = input.read(data, 0, BUFFER_SIZE)) != -1 && __progress != 100) 
                                                               {
                                                               downloadedSize += count;
                                                                output.write(data, 0, count);
                                                                 __progress = (int)((downloadedSize * 100) / contentLengthLong);
                                                               }
                                                            System.out.println("File downloade __progress "+__progress);
                                                            output.close();
                                                            input.close();
                                                            
						 }  
					 }
                              } 
                           } // end of for loop
        
        
           if(flag)
                   {
                        System.out.println("Flag is calling new file download");
         try{
        System.out.println("file is Downloading");
  ReadableByteChannel in=Channels.newChannel( new URL(fileURL).openStream());
  FileChannel out=new FileOutputStream(saveDir).getChannel();

  out.transferFrom(in, 0, Long.MAX_VALUE);
  // to get  file length
  int  length =getFileSize(new URL(fileURL));
System.out.println("file_lenght "+length);
  
  in.close();   
  out.close();
}

    catch(Exception e)  {
        e.printStackTrace();
    }
    System.out.println("Transfer completed");
   /* RedirectClass redirectClass=new RedirectClass();
    redirectClass.getUrl(Filename, macid);*/
       }
    
    getUrl(Filename, macid);
    return "";
    }
      
      public static void checkHosts(String subnet) throws UnknownHostException, IOException{
          System.out.println("Inside check host");
   int timeout=1000;
   for (int i=1;i<255;i++){
       String host=subnet + "." + i;
       if (InetAddress.getByName(host).isReachable(timeout)){
                         System.out.println("Host:"+host+" i:"+i);
           System.out.println(host + " is reachable");
       }
   }
   
   
   
}
      
     private int getFileSize(URL url) {
    HttpURLConnection conn = null;
    try {
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("HEAD");
        conn.getInputStream();
        return conn.getContentLength();
    } catch (IOException e) {
        return -1;
    } finally {
        conn.disconnect();
    }
}
      
      public static String geturls(String macid,String name,String location,String status )
   {
       		String outputs="";
         try {
               
              //String input ="http://192.168.0.123:8080/api/jsonws/addMe-portlet.device/save-and-update-device-details-remotely/device-address/44-37-E6-99-62-5C/device-location/12.9716%C2%B0%20N%2C%2077.5946%C2%B0%20E/device-status/Activated/device-name/DeviceAB";
            String input ="http://192.168.0.106:8080/api/jsonws/addMe-portlet.device/save-and-update-device-details-remotely/device-address/"+macid+"/device-location/"+location+"/device-status/Activated/device-name/"+name;
           // String input ="http://192.168.0.110:8080/api/jsonws/addMe-portlet.device/save-and-update-device-details-remotely/device-address/"+macid+"/device-location/"+location+"/device-status/Activated/device-name/"+name;
           //  String input ="http://216.98.9.235:8080/api/jsonws/addMe-portlet.device/save-and-update-device-details-remotely/device-address/"+macid+"/device-location/"+location+"/device-status/Activated/device-name/"+name;
           // String input="http://192.168.0.106:8080/api/jsonws/addMe-portlet.device/get-device-acknowledgment-remotely/unique-name/42818.mp4/device-address/44-37-E6-55-CA-DB";
             System.out.println("server is connecting ");
             System.out.println("server is connecting "+ input);
           // System.out.println("input AddMe:"+input);
            /* UrlValidator urlValidator = new UrlValidator();
            if(urlValidator.isValid(input))
            System.out.println("vALID url");
            else {
                System.out.println("invalid url");
            }*/
                URL url = new URL(input);
                // String userpassword= "nhasan52@gmail.com:hasanw200i";
              //String userpassword= "panditmanish680@gmail.com:111";
             // String userpassword="anujabugade443@gmail.com:anuja";
                String userpassword="nikhitha@liferay.com:test"; // nikitha system as server
                //String userpassword="test@liferay.com:test"; // nikitha system as server
              BASE64Encoder enc = new sun.misc.BASE64Encoder();
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                String encodedAuthorization = enc.encode( userpassword.getBytes() );
                conn.setRequestProperty("Authorization", "Basic "+
                           encodedAuthorization);
               // conn.setRequestProperty ("Authorization", "panditmanish680@gmail.com:111");
		conn.setDoOutput(true);
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Content-Type", "application/json");
		//String input = "{\"deviceAddress\": \"12 - SB - WE - 23 - GC - 09\",\"deviceLocation\":\" 12.9716° N, 77.5946° E\",\"deviceStatus\": \"Activated\",\"deviceName\": \"Micromax\"}";

		//OutputStream os = conn.getOutputStream();
		//os.write(input.getBytes());
		//os.flush();

		/*if (conn.getResponseCode() != HttpURLConnection.HTTP_CREATED) {
			throw new RuntimeException("Failed : HTTP error code : "
				+ conn.getResponseCode());
		}*/

		BufferedReader br = new BufferedReader(new InputStreamReader(
				(conn.getInputStream())));
                   String output;
		System.out.println("Output from Server .... \n");
		while ((output = br.readLine()) != null) {
			//System.out.println("output:"+output);
                        outputs= output;
		}

		conn.disconnect();

	  } /*catch (MalformedURLException e) {

		e.printStackTrace();

	  } catch (IOException e) {

		e.printStackTrace();

	 }*/catch(Exception e)
         {
         System.out.println("could not connect to server");
         }
         System.out.println("output:"+outputs);
         return outputs;
   }
      
     public static void getUrl(String fileUniqueName, String deviceAddress)
     {
         String outputs="";
       try
       {
        //  start to call  api to send acknowledgement to server 
    String input ="http://192.168.0.110:8080/api/jsonws/addMe-portlet.device/get-device-acknowledgment-remotely/unique-name/"+fileUniqueName+"/device-address/"+deviceAddress;
    //String input ="http://216.98.9.235:8080/api/jsonws/addMe-portlet.device/get-device-acknowledgment-remotely/unique-name/"+fileUniqueName+"/device-address/"+deviceAddress;
    //String input1="http://192.168.0.117:8080/api/jsonws/addMe-portlet.device/get-device-acknowledgment-remotely/unique-name/42818.mp4/device-address/44-37-E6-55-CA-DB";
    //String input="http://192.168.0.110:8080/api/jsonws/addMe-portlet.device/get-device-acknowledgment-remotely/unique-name/55022.jpg/device-address/44-37-E6-99-62-5C";
     //String input="http://192.168.0.106:8080/api/jsonws/addMe-portlet.device/save-and-update-device-details-remotely/device-address/44-37-E6-99-62-5C/device-location/31.1048,77.1734/device-status/Activated/device-name/Lenovo-PC";
   URL url = new URL(input);
   System.out.println("Output from Server33 .... \n "+input);
                // String userpassword= "nhasan52@gmail.com:hasanw200i";
              //String userpassword= "panditmanish680@gmail.com:111";
             // String userpassword="anujabugade443@gmail.com:anuja";
                String userpassword="nikhitha@liferay.com:test"; // nikitha system as server
                // String userpassword="test@liferay.com:test"; // nikitha system as server
              BASE64Encoder enc = new sun.misc.BASE64Encoder();
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                String encodedAuthorization = enc.encode( userpassword.getBytes() );
                conn.setRequestProperty("Authorization", "Basic "+
                           encodedAuthorization);
               // conn.setRequestProperty ("Authorization", "panditmanish680@gmail.com:111");
		conn.setDoOutput(true);
		conn.setRequestMethod("GET");
		conn.setRequestProperty("Content-Type", "application/json");
		// to test
                
		BufferedReader br = new BufferedReader(new InputStreamReader(
				(conn.getInputStream())));
                   String output;
		System.out.println("Output from Server334 .... \n");
		while ((output = br.readLine()) != null) {
			System.out.println("output333:"+output);
                        outputs= output;
		}

                
                
                
    System.out.println("Input after calling new api again "+input);
    conn.disconnect();
    
       
       }catch(Exception e){}
     
     
     }
      
      public static int ordinalIndexOf(String str, String substr, int n) {
    int pos = str.indexOf(substr);
    while (--n > 0 && pos != -1)
        pos = str.indexOf(substr, pos + 1);
    return pos;
}
      
           /*private static void downloadUsingStream(String urlStr, String file) throws IOException{
                StringBuilder sb = new StringBuilder(urlStr);
         sb.deleteCharAt(0);
            sb.deleteCharAt(sb.length()-1);
        urlStr = sb.toString();
                urlStr = urlStr.replace("localhost", "192.168.0.144");
               URL url = new URL(urlStr);
       //  String userpassword= "panditmanish680@gmail.com:111";
                 String userpassword= "anujabugade443@gmail.com :anuja";
              BASE64Encoder enc = new sun.misc.BASE64Encoder();
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                String encodedAuthorization = enc.encode( userpassword.getBytes() );
                conn.setRequestProperty("Authorization", "Basic "+
            encodedAuthorization);
               // conn.setRequestProperty ("Authorization", "panditmanish680@gmail.com:111");
		conn.setDoOutput(true);
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Content-Type", "application/json");
        BufferedInputStream bis = new BufferedInputStream(url.openStream());
        FileOutputStream fis = new FileOutputStream(file);
        byte[] buffer = new byte[1024];
        int count=0;
        while((count = bis.read(buffer,0,1024)) != -1)
        {
            fis.write(buffer, 0, count);
        }
        fis.close();
        bis.close();
    }*/
           
           public static  void downloadliferay(String url,String path)
           {
               int index = ordinalIndexOf(url, "/", 6);
        System.out.println("index:"+index);
         System.out.println(url.substring(index+1,url.lastIndexOf("/"))); 
               String fileName = url.substring(index+1,url.lastIndexOf("/"));
               System.out.println("filename:"+fileName);
               fileName = fileName.substring(0,5);
               System.out.println("filename:"+fileName);
               int fileentryno = Integer.parseInt(fileName);
               fileentryno = fileentryno+1;
               System.out.println("fileentryno:"+fileentryno);
                 StringBuilder sb = new StringBuilder(url);
            sb.deleteCharAt(0);
            sb.deleteCharAt(sb.length()-1);
            url = sb.toString();
               String userpassword= "panditmanish680@gmail.com:111";
               System.out.println("Inside downlaod liferay:");
String fileEntryId= "39212";
                url = "http://localhost:8080/api/jsonws/dlapp/get-file-entry/file-entry-id/"+fileentryno;
                               url = url.replace("localhost","192.168.0.119");
               System.out.println("url:"+url);
try {
    HttpGet httpGet = new HttpGet(url);
  HttpPost httpPost = new HttpPost(url);
   String base64Encoded = DatatypeConverter.printBase64Binary(
                           userpassword.getBytes("UTF-8"));
  httpPost.setHeader("Authorization", "Basic "  +  base64Encoded);
  MultipartEntity multiPartEntity = new MultipartEntity(
                                         HttpMultipartMode.BROWSER_COMPATIBLE,
                                            null,Charset.forName("UTF-8"));
  //List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();
  //urlParameters.add(new BasicNameValuePair("fileEntryId", fileEntryId));
  //httpPost.setEntity(new UrlEncodedFormEntity(urlParameters));
  CloseableHttpResponse response = (CloseableHttpResponse) HttpClientBuilder.
                                     create().build().execute(httpPost);
  System.out.println("Response:"+response);
  String responseContent = "";
  BufferedReader bufferedReader = null;
  StringBuffer result = null;
  try{
    bufferedReader = new BufferedReader(
                       new InputStreamReader(
                            response.getEntity().getContent()));
    result = new StringBuffer();
    String line = "";
    while ((line = bufferedReader.readLine()) != null){
      result.append(line);
  }
    System.out.println("result:"+result);
  responseContent = result.toString();
  System.out.println("responseContent:"+responseContent);
  } finally{
    bufferedReader.close();
    response.close();
  }
 /* File file = null;
  try{
    String tempDir = System.getProperty("java.io.tmpdir");
    String path1 = tempDir + File.separator + "aaa" + "." + "mp4";
    System.out.println("temp path:"+path1);
    file = new File(path1);
    FileUtils.copyInputStreamToFile(response.getEntity().getContent(), file);
  } finally{
    response.close();
  }*/
} catch(Exception e) {
    e.printStackTrace();
  //Handle Exception
}
  /*String responseContent = "";
  BufferedReader bufferedReader = null;
  StringBuffer result = null;
  try{
    bufferedReader = new BufferedReader(
                       new InputStreamReader(
                            response.getEntity().getContent()));
    result = new StringBuffer();
    String line = "";
    while ((line = bufferedReader.readLine()) != null){
        System.out.println("line print"+line);
      result.append(line);
  }
  responseContent = result.toString();
  System.out.println("Response:"+responseContent);
  } finally{
    bufferedReader.close();
    response.close();
  }
} catch (Exception e) {
  e.printStackTrace();
}*/
           } 
      
  
      
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    public javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
